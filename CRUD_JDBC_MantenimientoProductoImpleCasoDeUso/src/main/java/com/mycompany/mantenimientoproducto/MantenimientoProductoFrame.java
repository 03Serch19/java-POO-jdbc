package com.mycompany.mantenimientoproducto;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class MantenimientoProductoFrame extends javax.swing.JFrame {
      ProductoTableModel productoTableModel=new ProductoTableModel();
      private Connection conexion;
      Producto productoActual=null;
      boolean guardar=true;

    public MantenimientoProductoFrame() {
        initComponents();
        inicializarColumnas();
        conectar();
        consultaInicial();
    }



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtCodigo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCantidadExistencia = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPrecioUnitario = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtBusqCodigo = new javax.swing.JTextField();
        txtBusqNombre = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Criterios de busqueda");

        tablaProductos.setModel(productoTableModel);
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProductos);

        jButton2.setText("Eliminar seleccionados");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Mantenimiento");

        jLabel4.setText("Código:");

        jLabel5.setText("Nombre:");

        jLabel6.setText("Cantidad en Existencia:");

        jLabel7.setText("Precio unitario:");

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnGuardar)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCantidadExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnNuevo)
                        .addComponent(txtPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCantidadExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnNuevo))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel2.setText("Código:");

        jLabel3.setText("Nombre:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBusqNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBusqCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(btnBuscar)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBusqCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(txtBusqNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnBuscar)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel8)))
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //programacion del crud completo 

  //Buscar
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        productoTableModel.productos.clear();
        try {
              PreparedStatement preSta=null;
              String codigo=txtBusqCodigo.getText();
              String nombre=txtBusqNombre.getText();
              String consulta="SELECT * FROM producto ";
               //JOptionPane.showMessageDialog(null, "prueba que entra aca");
              if(!(codigo.isEmpty())){
                  if(!(nombre.isEmpty())){
                  //JOptionPane.showMessageDialog(null, "prueba que entra aca");
                      consulta += "WHERE idproducto ILIKE ? OR nomproducto ILIKE ?";
                      preSta=this.conexion.prepareStatement(consulta);
                      preSta.setString(1, codigo+"%");
                      preSta.setString(2, "%"+nombre+"%");                   
                  }else{
                      consulta += "WHERE idproducto ILIKE ?";
                      preSta=this.conexion.prepareStatement(consulta);
                      preSta.setString(1, codigo+"%");
                  }
              }else{
                  
                    if(!(nombre.isEmpty())){
                      consulta += "WHERE nomproducto ILIKE ?";
                      preSta=this.conexion.prepareStatement(consulta);
                      preSta.setString(1, "%"+nombre+"%");                   
                   }else{                    
                      preSta=this.conexion.prepareStatement(consulta);
                    }
              }
              ResultSet resulSet = preSta.executeQuery();//ojo con el execute query, uno es de prepared, y el quye lleva parametros es de solo statemen,(prepared statemen es subclase de statemnent
              while (resulSet.next()) {                
              Producto producto =new Producto();
              producto.codigo=resulSet.getString("idproducto");
              producto.nombre = resulSet.getString("nomproducto");
              producto.cantidadExistencia = resulSet.getDouble("exisproducto");
              producto.precioUnitario = resulSet.getDouble("precproducto");
              productoTableModel.productos.add(producto);
            }
              //tablaProductos.repaint();//redundante
          } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error en la consulta");
            ex.printStackTrace();
          }
        tablaProductos.repaint();
    }//GEN-LAST:event_btnBuscarActionPerformed

  //eliminar seleccionados
  //hacemos un manejo de desbordes y posbles erorres en el mometno de elegir multioes filas, o cuando se elijen al final
  //o al iico de la fila, o juntas, se manejan en como los idices se vanreodrnando para elegir y eleimar 
  //siempre el elemetno correcto, algo que en la guia fuente de este problema no se trata
  //y es compresible porque el objetivo es el maejo del rud basico e jdbc y entender, pero aca nsotros lo compjeisamos para hacerlo mas robusto
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//
        int band=0;
        int[] indices=tablaProductos.getSelectedRows();
       // List<Producto> aEliminar = new ArrayList<Producto>();//podria ser util en futroi para alamcenar productos eliminados
        for (int indice : indices) {
            if(band!=0)indice-=band;//esto nos ayuda a borrar las seleciones que queriamos
            Producto proEliminar=productoTableModel.productos.get(indice);
            String sentenciaSql="DELETE FROM producto WHERE idproducto = ?"; 
            band++;//esto nos ayuda a controlar el borrado y asi lograr borrar las seleciones que originalmente queriamos eliminar
         // aEliminar.add(producto);//guardamos el producto eliminado
            try {
             PreparedStatement preState= conexion.prepareStatement(sentenciaSql);
             preState.setString(1,proEliminar.codigo);
             preState.executeUpdate();
             productoTableModel.productos.clear();
             consultaInicial();
             /*int band2=-1;
                for (int j : indices) {
                     band2++;
                    if((band2)<band) continue;
                        j-=band;
                    tablaProductos.setRowSelectionInterval(j, j);
                }*/
            // tablaProductos.removeRowSelectionInterval(indice-band, indice-band);
            
            
           /*  int band2=1;
                for (int j : indices) {
                    if(band!=1){
                      if(band2==band){tablaProductos.removeRowSelectionInterval(j-band+1,j-band+1);}
                      else if(band2>band){                   
                        tablaProductos.addRowSelectionInterval(j-band, j-band);
                        tablaProductos.removeRowSelectionInterval(j-band+1,j-band+1);
                     } 
                    }else{
                    tablaProductos.removeRowSelectionInterval(indice, indice); 
                    if(band2>band){                   
                        tablaProductos.addRowSelectionInterval(indice-band, indice-band);
                     } 
                    }
                    
                    band2++;
                }
                */
           /*int band2=0;
                 for (int j : indices) {
                     if(band2==0){
                         tablaProductos.removeRowSelectionInterval(j,j);
                          band2++;
                     }
                     else{
                    tablaProductos.removeRowSelectionInterval(j,j);
                    tablaProductos.addRowSelectionInterval(j-1, j-1);
                     }
                }*/
           int auxTamanio=productoTableModel.productos.size();
           if(tablaProductos.getSelectedRow() !=  auxTamanio){
           int band2=0;
                 for (int j : indices) {
                     if(band==1){
                         if(band2==0){
                         tablaProductos.removeRowSelectionInterval(j,j);
                          band2++;
                         } else{
                           if(j==auxTamanio){
                           tablaProductos.addRowSelectionInterval(j-band, j-band);
                           }
                           else{
                          tablaProductos.removeRowSelectionInterval(j,j);
                          tablaProductos.addRowSelectionInterval(j-band, j-band);
                           }
                       }                   
                     }else{
                        // band2++;
                         if(band2==band-1){
                             if(j-band+1 !=auxTamanio){
                            tablaProductos.removeRowSelectionInterval(j-band+1,j-band+1);
                             }
                         }else if(band2>=band){
                             if(j-band+1 ==auxTamanio){
                                tablaProductos.addRowSelectionInterval(j-band, j-band);  
                             }else{
                             tablaProductos.removeRowSelectionInterval(j-band+1, j-band+1);
                             tablaProductos.addRowSelectionInterval(j-band, j-band);
                             }
                         }
                         band2++;
                     }                    
                }
             }
             /*if(tablaProductos.getSelectedRow() !=  productoTableModel.productos.size()){
             if(band==1)tablaProductos.removeRowSelectionInterval(indice, indice);
             else tablaProductos.removeRowSelectionInterval(indice+=(band-1), indice);
             }*/
             JOptionPane. showMessageDialog(this, "Elimino correctamente " + proEliminar.codigo);
             
           } catch (SQLException ex) {
               Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(Level.SEVERE, null, ex);
           } 
        }  
       tablaProductos.clearSelection();
    }


    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
      if(validarCampos()){
         try {
          if(guardar){
          Producto nProducto=new Producto();
          nProducto.codigo=txtCodigo.getText();
          nProducto.nombre=txtNombre.getText();
          nProducto.cantidadExistencia=Double.parseDouble(txtCantidadExistencia.getText());
          nProducto.precioUnitario=Double.parseDouble(txtPrecioUnitario.getText());
         
          String sqlInsert="INSERT INTO producto(idproducto, nomproducto, precproducto, exisproducto) VALUES(?, ?, ?, ?)";
              PreparedStatement prSta=conexion.prepareStatement(sqlInsert);
              prSta.setString(1, nProducto.codigo);
              prSta.setString(2, nProducto.nombre);
              prSta.setDouble(3, nProducto.precioUnitario);
              prSta.setDouble(4, nProducto.cantidadExistencia);
              prSta.executeUpdate();
              
              productoTableModel.productos.add(nProducto);
           }else{
              String sentenciaSql = "UPDATE producto SET nomproducto = ?, exisproducto = ?,precproducto= ? WHERE idproducto = ? ";
              PreparedStatement prepaSta=conexion.prepareStatement(sentenciaSql);
              prepaSta.setString(1, txtNombre.getText());
              prepaSta.setDouble(2, Double.parseDouble(txtCantidadExistencia.getText()));
              prepaSta.setDouble(3, Double.parseDouble(txtPrecioUnitario.getText()));
              prepaSta.setString(4, txtCodigo.getText());
              
              prepaSta.executeUpdate();
              
              productoActual.codigo=txtCodigo.getText();
              productoActual.cantidadExistencia=Double.parseDouble(txtCantidadExistencia.getText());
              productoActual.precioUnitario=Double.parseDouble(txtPrecioUnitario.getText());
              productoActual.nombre = txtNombre.getText();
              
          }
              tablaProductos.repaint();
          } catch (SQLException ex) {
              JOptionPane.showMessageDialog(this, "Error al guardar el producto");
                ex.printStackTrace();
          }
      }else{
      }
    }
    

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {
            txtCodigo.setText("");
            guardar = true;
            productoActual = null;
        /* try {
              conexion.close();
              System.out.println("comexio cerrada");
              consultaInicial();
          } catch (SQLException ex) {
              Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(Level.SEVERE, null, ex);
          }*/
    }


    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {
        int clics = evt.getClickCount();
        int row = tablaProductos.rowAtPoint(evt.getPoint());
        
        if(clics==2){
        Producto p=productoTableModel.productos.get(row);
        productoActual=p ;
        txtCodigo.setText(p.codigo);
        txtNombre.setText(p.nombre);
        txtPrecioUnitario.setText(String.valueOf(p.precioUnitario));
        txtCantidadExistencia.setText(String.valueOf(p.cantidadExistencia));
        guardar=false;
        }
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      
        try {
        conexion.close();
        } catch (SQLException ex){
        JOptionPane.showMessageDialog(this, "Ocurrió un error al cerrar la conexión a la base de datos");
        }
        JOptionPane.showMessageDialog(this, "La conexión a la base de datos ha sido cerrada");
    }


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenimientoProductoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtBusqCodigo;
    private javax.swing.JTextField txtBusqNombre;
    private javax.swing.JFormattedTextField txtCantidadExistencia;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JFormattedTextField txtPrecioUnitario;
    // End of variables declaration//GEN-END:variables
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private void inicializarColumnas() {
        TableColumnModel tColumModdel=new DefaultTableColumnModel();
        for (int i = 0; i < 4; i++) {
            TableColumn col= new TableColumn(i);
            switch (i) {
                case 0:
                    col.setHeaderValue("Código");
                    break;
                case 1:
                    col.setHeaderValue("Nombre");
                    break;
               case 2:
                    col.setHeaderValue("Existencia");
                    break;
               case 3:
                    col.setHeaderValue("Precio");
                    break;           
                default:
                    throw new AssertionError();
            }
            tColumModdel.addColumn(col);
        }
        tablaProductos.setColumnModel(tColumModdel);
    }

    private void conectar() {
        try {
            conexion=DriverManager.getConnection("jdbc:postgresql://host:puerto/nombre_de_la_base_de_datos", "usuario", "contraseña");//aqui van los datos,por obvias razones decidi omitir, pero se reemplazan por los datos propios pertenecientes a lo solicitado
        } catch (SQLException ex) {
       Logger.getLogger(MantenimientoProductoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaInicial() {
       try {
           String consulta = "SELECT * FROM producto";//PreparedStatement statement = null;
           Statement statement =conexion.createStatement();//statement = this.conexion.prepareStatement(sentenciaSql);
           ResultSet resulSet =statement.executeQuery(consulta);//ResultSet resultado = statement.executeQuery();//valido tambien ya quer un preparestatatement es un statement que admite parametros para ser sustituidos en la consulta
           while (resulSet.next()) {
              Producto producto =new Producto();
              producto.codigo=resulSet.getString("idproducto");
              producto.nombre = resulSet.getString("nomproducto");
              producto.cantidadExistencia = resulSet.getDouble("exisproducto");
              producto.precioUnitario = resulSet.getDouble("precproducto");
              productoTableModel.productos.add(producto);
           }
           tablaProductos.repaint();
       }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Error al recuperar los productos de la base de datos");
            ex.printStackTrace();
        }
    }
    private boolean validarCampos(){
        if(txtCodigo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Campo no puede ser vacío,Debe ingresar un codigo");
        return false;
        }if(txtNombre.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Campo no puede ser vacío,Debe ingresar un nombre");
         return false;
        }if(txtCantidadExistencia.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Campo no puede ser vacío,Debe ingresar la cantidad en existencias");
         return false;}
       if(txtPrecioUnitario.getText().isEmpty()){JOptionPane.showMessageDialog(this, "Campo no puede ser vacío,Debe ingresar un precio");
       return false;}
       return true;
    }
}
